[{"C:\\Users\\sojed\\Desktop\\restaurante-react\\src\\index.tsx":"1","C:\\Users\\sojed\\Desktop\\restaurante-react\\src\\reportWebVitals.ts":"2","C:\\Users\\sojed\\Desktop\\restaurante-react\\src\\App.tsx":"3","C:\\Users\\sojed\\Desktop\\restaurante-react\\src\\firebase.ts":"4"},{"size":567,"mtime":1609779089156,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":4569,"mtime":1609606330565,"results":"8","hashOfConfig":"6"},{"size":471,"mtime":1609779094543,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1m9e276",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\sojed\\Desktop\\restaurante-react\\src\\index.tsx",[],"C:\\Users\\sojed\\Desktop\\restaurante-react\\src\\reportWebVitals.ts",[],["20","21"],"C:\\Users\\sojed\\Desktop\\restaurante-react\\src\\App.tsx",["22","23","24","25","26","27","28","29"],"import { futimes } from \"fs\";\nimport { stringify } from \"querystring\";\nimport React, { FormEvent, Fragment, useState, useRef } from \"react\";\nimport { formatDiagnostic } from \"typescript\";\nimport logo from \"./logo.svg\";\n\ntype FormElement = React.FormEvent<HTMLFormElement>;\n\ninterface IOrden {\n  mesa: number;\n  personas: number;\n  comida: string;\n  bebida: string;\n  done: boolean;\n}\n\nfunction App(): JSX.Element {\n  const [orden, setOrden] = useState<IOrden>({\n    mesa: 0,\n    personas: 0,\n    comida: \"\",\n    bebida: \"\",\n    done: false,\n  });\n  const [ordenes, setOrdenes] = useState<IOrden[]>([]);\n  const taskInput = useRef<HTMLInputElement>(null);\n\n  function actualizarOrden(e: FormElement) {\n    e.preventDefault();\n    guardarOrden(orden);\n    setOrden(orden)\n    console.log(ordenes);\n  }\n\n  function crearOrden(e: any) {\n    const value = e.target.value;\n    setOrden({\n      ...orden,\n      [e.target.name]: value,\n      done: false,\n    });\n  }\n\n  const guardarOrden = (orden: IOrden) => {\n    const nuevaOrden: IOrden[] = [...ordenes, orden];\n    setOrdenes(nuevaOrden);\n  };\n\n  const actualizarDone = (i: number) => {\n    const nuevaOrden: IOrden[] = [...ordenes];\n    nuevaOrden[i].done = !nuevaOrden[i].done;\n    setOrdenes(nuevaOrden);\n  };\n\n  const eliminarOrden = (i: number) => {\n    const orden: IOrden[] = [...ordenes];\n    orden.splice(i, 1);\n    setOrdenes(orden);\n  };\n\n  return (\n    <Fragment>\n      <ul className=\"nav justify-content-end\">\n        <li className=\"nav-item\">\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\n            Active\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"#\">\n            Link\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"#\">\n            Link\n          </a>\n        </li>\n      </ul>\n      <div className=\"row\">\n        <div className=\"col-3\">\n          <div className=\"card mt-5\">\n            <div className=\"card-body\">\n              <form onSubmit={actualizarOrden}>\n                <label>\n                  Mesa:\n                  <input\n                    className=\"form-control mt-2\"\n                    name=\"mesa\"\n                    type=\"number\"\n                    onChange={crearOrden}\n                    value={orden.mesa}\n                    ref={taskInput}\n                    autoFocus\n                  />\n                </label>\n                <label>\n                  Personas:\n                  <input\n                    className=\"form-control mt-2\"\n                    name=\"personas\"\n                    type=\"number\"\n                    onChange={crearOrden}\n                    value={orden.personas}\n                  />\n                </label>\n                <label>\n                  Comida:\n                  <input\n                    className=\"form-control mt-2\"\n                    name=\"comida\"\n                    type=\"text\"\n                    onChange={crearOrden}\n                    value={orden.comida}\n                  />\n                </label>\n                <label>\n                  Bebida:\n                  <input\n                    className=\"form-control mt-2\"\n                    name=\"bebida\"\n                    type=\"text\"\n                    onChange={crearOrden}\n                    value={orden.bebida}\n                  />\n                </label>\n                <div className=\"form-group text-center mt-3\">\n                  <button className=\"btn btn-success \">Crear</button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-9\">\n          {ordenes.map((o: IOrden, i: number) => (\n            <div className=\"col-3 card card-body-mt-2\" key={i}>\n              <h1 style={{ textDecoration: o.done ? \"line-through\" : \"\" }}>\n                Orden {i + \"\"}\n              </h1>\n              <h2>Mesa: {o.mesa}</h2>\n              <h2>Personas: {o.personas}</h2>\n              <h2>Comida: {o.comida}</h2>\n              <h2>Bebida: {o.bebida}</h2>\n              <button\n                className=\"btn btn-secondary\"\n                onClick={() => actualizarDone(i)}\n              >\n                {o.done ? \"âœ—\" : \"âœ“\"}\n              </button>\n              <button\n                className=\"btn btn-danger\"\n                onClick={() => eliminarOrden(i)}\n              >\n                ðŸ—‘\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","C:\\Users\\sojed\\Desktop\\restaurante-react\\src\\firebase.ts",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":1,"column":10,"nodeType":"36","messageId":"37","endLine":1,"endColumn":17},{"ruleId":"34","severity":1,"message":"38","line":2,"column":10,"nodeType":"36","messageId":"37","endLine":2,"endColumn":19},{"ruleId":"34","severity":1,"message":"39","line":3,"column":17,"nodeType":"36","messageId":"37","endLine":3,"endColumn":26},{"ruleId":"34","severity":1,"message":"40","line":4,"column":10,"nodeType":"36","messageId":"37","endLine":4,"endColumn":26},{"ruleId":"34","severity":1,"message":"41","line":5,"column":8,"nodeType":"36","messageId":"37","endLine":5,"endColumn":12},{"ruleId":"42","severity":1,"message":"43","line":65,"column":11,"nodeType":"44","endLine":65,"endColumn":71},{"ruleId":"42","severity":1,"message":"43","line":70,"column":11,"nodeType":"44","endLine":70,"endColumn":44},{"ruleId":"42","severity":1,"message":"43","line":75,"column":11,"nodeType":"44","endLine":75,"endColumn":44},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"@typescript-eslint/no-unused-vars","'futimes' is defined but never used.","Identifier","unusedVar","'stringify' is defined but never used.","'FormEvent' is defined but never used.","'formatDiagnostic' is defined but never used.","'logo' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]